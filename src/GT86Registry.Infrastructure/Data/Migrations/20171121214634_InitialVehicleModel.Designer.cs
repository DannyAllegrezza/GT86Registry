// <auto-generated />
using GT86Registry.Core.Entities;
using GT86Registry.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GT86Registry.Infrastructure.Data.Migrations
{
    [DbContext(typeof(VehicleDbContext))]
    [Migration("20171121214634_InitialVehicleModel")]
    partial class InitialVehicleModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GT86Registry.Core.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(3);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.ColorsYears", b =>
                {
                    b.Property<int>("ColorId");

                    b.Property<int>("YearId");

                    b.HasKey("ColorId", "YearId");

                    b.HasIndex("YearId");

                    b.ToTable("ColorYears");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsInProduction");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.TransmissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Name");

                    b.HasKey("Id");

                    b.ToTable("TransmissionType");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Vehicle", b =>
                {
                    b.Property<string>("VIN")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ColorId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("LocationId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("UserIdentityGuid")
                        .IsRequired();

                    b.Property<int>("VehicleModelId");

                    b.HasKey("VIN");

                    b.HasIndex("ColorId");

                    b.HasIndex("LocationId");

                    b.HasIndex("VehicleModelId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehicleLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<DateTime>("ModifiedDate");

                    b.HasKey("Id");

                    b.ToTable("VehicleLocation");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehicleModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("FactoryWeight");

                    b.Property<int>("ManufacturerId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("TransmissionTypeId");

                    b.Property<int?>("TrimId");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("TransmissionTypeId");

                    b.HasIndex("TrimId");

                    b.ToTable("VehicleModels");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehicleModelTrim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("VehicleModelTrim");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehicleModelYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ManufacturerId");

                    b.Property<int>("VehicleModelId");

                    b.Property<int>("YearId");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("VehicleModelId");

                    b.HasIndex("YearId");

                    b.ToTable("VehicleModelYear");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehiclePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("PictureUri");

                    b.Property<string>("ThumbnailUri");

                    b.HasKey("Id");

                    b.ToTable("VehiclePhoto");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehiclesVehiclePhotos", b =>
                {
                    b.Property<int>("VehicleVIN");

                    b.Property<int>("VehiclePhotoId");

                    b.Property<string>("VehicleVIN1");

                    b.HasKey("VehicleVIN", "VehiclePhotoId");

                    b.HasIndex("VehiclePhotoId");

                    b.HasIndex("VehicleVIN1");

                    b.ToTable("VehiclesVehiclePhotos");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.ColorsYears", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.Color", "Color")
                        .WithMany("ColorYears")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.Year", "Year")
                        .WithMany("ColorYears")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.VehicleLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("GT86Registry.Core.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehicleModel", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.Manufacturer", "Manufacturer")
                        .WithMany("VehicleModels")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.TransmissionType", "TransmissionType")
                        .WithMany()
                        .HasForeignKey("TransmissionTypeId");

                    b.HasOne("GT86Registry.Core.Entities.VehicleModelTrim", "Trim")
                        .WithMany()
                        .HasForeignKey("TrimId");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehicleModelYear", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.Manufacturer", "Manufacturer")
                        .WithMany("VehicleModelYear")
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.VehicleModel", "VehicleModel")
                        .WithMany("VehicleModelYear")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.Year", "Year")
                        .WithMany("VehicleModelYear")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.VehiclesVehiclePhotos", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.VehiclePhoto", "VehiclePhoto")
                        .WithMany("VehiclesPhotos")
                        .HasForeignKey("VehiclePhotoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.Vehicle", "Vehicle")
                        .WithMany("VehiclesPhotos")
                        .HasForeignKey("VehicleVIN1");
                });
#pragma warning restore 612, 618
        }
    }
}
