// <auto-generated />
using GT86Registry.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GT86Registry.Infrastructure.Data.Migrations
{
    [DbContext(typeof(CarDbContext))]
    partial class CarDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GT86Registry.Core.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CarModelId");

                    b.Property<int>("ColorId");

                    b.Property<string>("IdentityGuid");

                    b.Property<bool>("IsManualTransmission");

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("VIN");

                    b.Property<int>("YearId");

                    b.HasKey("Id");

                    b.HasIndex("CarModelId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("YearId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.CarModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ManufacturerId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(3);

                    b.Property<int>("ManufacturerId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.ColorsYears", b =>
                {
                    b.Property<int>("ColorId");

                    b.Property<int>("YearId");

                    b.Property<int>("ManufacturerId");

                    b.HasKey("ColorId", "YearId");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("YearId");

                    b.ToTable("ColorYears");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsInProduction");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Car", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.CarModel", "CarModel")
                        .WithMany("Cars")
                        .HasForeignKey("CarModelId");

                    b.HasOne("GT86Registry.Core.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("GT86Registry.Core.Entities.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.CarModel", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.Manufacturer", "Manufacturer")
                        .WithMany("CarModels")
                        .HasForeignKey("ManufacturerId");
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.Color", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GT86Registry.Core.Entities.ColorsYears", b =>
                {
                    b.HasOne("GT86Registry.Core.Entities.Color", "Color")
                        .WithMany("ColorYears")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GT86Registry.Core.Entities.Year", "Year")
                        .WithMany("ColorYears")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
